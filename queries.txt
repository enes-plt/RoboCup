% Add your queries below. Please use the following format
% 
% %%%%% QUERY 2
% % EXPLANATION: Checks if there is a block on blockA
% on(X, blockA).
%
% where 2 is the number of the query. The EXPLANATION line should contain your explanation 
% in English of what the query tests. Omit the "%" on the line with the query
% Don't forget to end queries with a period.

%%%%%% QUERY 1
% EXPLANATION: Checks if r1 can pass to r4 in 3 moves or less
canPass(r1, r4, 3).


%%%%%% QUERY 2
% EXPLANATION: Checks if r1 can pass to r4 in 1 move
canPass(r1, r4, 1).


%%%%%% QUERY 3
% EXPLANATION: Checks if a robot can pass to the net
canPass(R, net, 1).


%%%%%% QUERY 4
% EXPLANATION: Can r1 score in 3 or less moves
canScore(r1, 3).


%%%%%% QUERY 5
% EXPLANATION: Checks which robots can score in 2 or less moves
canScore(R, 2).


%%%%%% QUERY 6
% EXPLANATION: Checks if r4 can pass to a robot in 1 move
canPass(r4, R, 1).


%%%%%% QUERY 7
% EXPLANATION: checks if r1 can pass back to itself in 3 moves or less
canPass(r1, r1, 3).


%%%%%% QUERY 8
% EXPLANATION: Checks if r6 can score in 6 moves or less
canScore(r6, 5).


%%%%%% QUERY 9
% EXPLANATION: Checks if there are two robots that can pass to each other in 1 move
canPass(R1, R2, 1).

%%%%%% QUERY 10
% EXPLANATION: Checks if there is a robot that can pass to r6 in two moves or less.
canPass(R, r6, 2).


%%%%%% YOU MAY CHOOSE TO ADD MORE THAN 10 QUERIES HERE
%%%%%% HOWEVER, ONLY THE FIRST 10 WILL BE MARKED


%%%%% INTERACTION
%
% Add your interaction below.
% 

?- canPass(r1, r4, 3).
Yes (0.00s cpu, solution 1, maybe more)
Yes (0.00s cpu, solution 2, maybe more)
No (0.00s cpu)
?- canPass(r1, r4, 1).
No (0.00s cpu)
?- canPass(R, net, 1).
No (0.00s cpu)
?- canScore(r1, 3).
Yes (0.00s cpu, solution 1, maybe more)
Yes (0.00s cpu, solution 2, maybe more)
No (0.00s cpu)
?- canScore(R, 2).
R = r3
Yes (0.00s cpu, solution 1, maybe more)
R = r1
Yes (0.02s cpu, solution 2, maybe more)
R = r4
Yes (0.02s cpu, solution 3, maybe more)
No (0.02s cpu)
?- canPass(r4, R, 1).
R = r3
Yes (0.00s cpu, solution 1, maybe more)
No (0.00s cpu)
?- canPass(r1, r1, 3).
Yes (0.00s cpu, solution 1, maybe more)
Yes (0.00s cpu, solution 2, maybe more)
Yes (0.00s cpu, solution 3, maybe more)
Yes (0.02s cpu, solution 4, maybe more)
Yes (0.02s cpu, solution 5, maybe more)
No (0.02s cpu)
?- canScore(r6, 5).
No (0.00s cpu)
?- canPass(R1, R2, 1).
R1 = r1
R2 = r2
Yes (0.00s cpu, solution 1, maybe more)
R1 = r1
R2 = r3
Yes (0.00s cpu, solution 2, maybe more)
R1 = r1
R2 = r5
Yes (0.00s cpu, solution 3, maybe more)
R1 = r2
R2 = r1
Yes (0.00s cpu, solution 4, maybe more)
R1 = r2
R2 = r3
Yes (0.00s cpu, solution 5, maybe more)
R1 = r3
R2 = r1
Yes (0.00s cpu, solution 6, maybe more)
R1 = r3
R2 = r2
Yes (0.00s cpu, solution 7, maybe more)
R1 = r3
R2 = r4
Yes (0.00s cpu, solution 8, maybe more)
R1 = r4
R2 = r3
Yes (0.00s cpu, solution 9, maybe more)
R1 = r5
R2 = r1
Yes (0.00s cpu, solution 10, maybe more)
R1 = r5
R2 = r6
Yes (0.00s cpu, solution 11, maybe more)
R1 = r6
R2 = r5
Yes (0.00s cpu, solution 12, maybe more)
No (0.00s cpu)
?- canPass(R, r6, 2).
R = r5
Yes (0.00s cpu, solution 1, maybe more)
R = r1
Yes (0.00s cpu, solution 2, maybe more)
R = r6
Yes (0.00s cpu, solution 3, maybe more)
No (0.00s cpu)